{"remainingRequest":"/Users/zhangjiaping/Desktop/project/b-tree/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/zhangjiaping/Desktop/project/b-tree/node_modules/@vuepress/theme-default/util/index.js","dependencies":[{"path":"/Users/zhangjiaping/Desktop/project/b-tree/node_modules/@vuepress/theme-default/util/index.js","mtime":1582616621496},{"path":"/Users/zhangjiaping/Desktop/project/b-tree/node_modules/cache-loader/dist/cjs.js","mtime":1582616623457},{"path":"/Users/zhangjiaping/Desktop/project/b-tree/node_modules/babel-loader/lib/index.js","mtime":1582616623245}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}