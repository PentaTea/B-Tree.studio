var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const NamedChunksPlugin = ({ pageChunkName = ({ key }) => 'page' + key.slice(1), layoutChunkName = false, }, context) => {
    // override internal plugins
    const plugins = [];
    if (pageChunkName) {
        plugins.push({
            name: '@vuepress/internal-page-components',
            extendPageData(page) {
                page._chunkName = pageChunkName(page);
            },
            clientDynamicModules() {
                return __awaiter(this, void 0, void 0, function* () {
                    const content = `export default {\n${context.pages
                        .filter(({ _filePath }) => _filePath)
                        .map(page => {
                        const key = JSON.stringify(page.key);
                        const filePath = JSON.stringify(page._filePath);
                        const comment = page._chunkName
                            ? `/* webpackChunkName: ${JSON.stringify(page._chunkName)} */`
                            : '';
                        return `  ${key}: () => import(${comment}${filePath})`;
                    })
                        .join(',\n')} \n}`;
                    return {
                        dirname: 'internal',
                        name: 'page-components.js',
                        content,
                    };
                });
            },
        });
    }
    if (layoutChunkName) {
        const { layoutComponentMap } = context.themeAPI;
        for (const key in layoutComponentMap) {
            const component = layoutComponentMap[key];
            component._chunkName = layoutChunkName(component);
        }
        plugins.push({
            name: '@vuepress/internal-layout-components',
            clientDynamicModules() {
                return __awaiter(this, void 0, void 0, function* () {
                    const { layoutComponentMap } = context.themeAPI;
                    const content = `export default {\n${Object.keys(layoutComponentMap)
                        .map(name => {
                        const component = layoutComponentMap[name];
                        const key = JSON.stringify(name);
                        const filePath = JSON.stringify(component.path);
                        const comment = component._chunkName
                            ? `/* webpackChunkName: ${JSON.stringify(component._chunkName)} */`
                            : '';
                        return `  ${key}: () => import(${comment}${filePath})`;
                    })
                        .join(',\n')} \n}`;
                    return {
                        dirname: 'internal',
                        name: 'layout-components.js',
                        content,
                    };
                });
            },
        });
    }
    return {
        name: 'vuepress-plugin-named-chunks',
        plugins,
    };
};
module.exports = NamedChunksPlugin;
//# sourceMappingURL=index.js.map